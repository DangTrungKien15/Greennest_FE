import { useState } from 'react';
import { Send, Bot, Phone, Mail, MapPin, Clock, CheckCircle2, Sparkles } from 'lucide-react';

interface ChatMessage {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
}

export default function Services() {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      type: 'bot',
      content: 'Ch√†o b·∫°n! üëã T√¥i l√† AI t∆∞ v·∫•n c·ªßa GREENNEST. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n\nüåø Thi·∫øt k·∫ø c·∫£nh quan\nüå± ChƒÉm s√≥c c√¢y c·∫£nh\nüè† Thi·∫øt k·∫ø kh√¥ng gian xanh\nüí∞ B√°o gi√° d·ªãch v·ª•\n\nB·∫°n c·∫ßn t∆∞ v·∫•n v·ªÅ d·ªãch v·ª• n√†o?',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const responses = [
        'T√¥i hi·ªÉu b·∫°n quan t√¢m ƒë·∫øn d·ªãch v·ª• n√†y. ƒê·ªÉ t∆∞ v·∫•n chi ti·∫øt, b·∫°n c√≥ th·ªÉ:\n\nüìû G·ªçi hotline: 0867976303\nüìß Email: info@greennest.vn\nüìç ƒê·∫øn tr·ª±c ti·∫øp: BS8 - The Beverly Solari, Vinhomes Grand Park',
        'D·ªãch v·ª• n√†y r·∫•t ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n! Ch√∫ng t√¥i c√≥:\n\n‚úÖ T∆∞ v·∫•n mi·ªÖn ph√≠\n‚úÖ Thi·∫øt k·∫ø 3D minh h·ªça\n‚úÖ B·∫£o h√†nh c√¢y tr·ªìng 30 ng√†y\n\nB·∫°n mu·ªën ƒë·∫∑t l·ªãch t∆∞ v·∫•n kh√¥ng?',
        'C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m! ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt, b·∫°n c√≥ th·ªÉ:\n\n1Ô∏è‚É£ M√¥ t·∫£ kh√¥ng gian hi·ªán t·∫°i\n2Ô∏è‚É£ Chia s·∫ª ng√¢n s√°ch d·ª± ki·∫øn\n3Ô∏è‚É£ ƒê·∫∑t l·ªãch kh·∫£o s√°t mi·ªÖn ph√≠\n\nT√¥i c√≥ th·ªÉ gi√∫p g√¨ th√™m cho b·∫°n?',
        'Tuy·ªát v·ªùi! Ch√∫ng t√¥i c√≥ nhi·ªÅu g√≥i d·ªãch v·ª• ph√π h·ª£p:\n\nüå± G√≥i c∆° b·∫£n: 2-5 tri·ªáu\nüåø G√≥i ti√™u chu·∫©n: 5-15 tri·ªáu\nüå≥ G√≥i cao c·∫•p: 15-50 tri·ªáu\n\nB·∫°n quan t√¢m g√≥i n√†o?'
      ];

      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: responses[Math.floor(Math.random() * responses.length)],
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const quickActions = [
    { text: 'T∆∞ v·∫•n thi·∫øt k·∫ø c·∫£nh quan', icon: 'üåø' },
    { text: 'ChƒÉm s√≥c c√¢y c·∫£nh', icon: 'üå±' },
    { text: 'B√°o gi√° d·ªãch v·ª•', icon: 'üí∞' },
    { text: 'ƒê·∫∑t l·ªãch kh·∫£o s√°t', icon: 'üìÖ' }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <section className="relative bg-gradient-to-r from-green-600 to-green-800 text-white py-20 overflow-hidden">
        {/* Background Image */}
        <div 
          className="absolute inset-0 bg-cover bg-center bg-no-repeat"
          style={{
            backgroundImage: `url('https://images.unsplash.com/photo-1560448204-603b3fc33ddc?w=1920&h=1080&fit=crop&crop=center')`
          }}
        ></div>
        <div className="absolute inset-0 bg-black bg-opacity-50"></div>
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center z-10">
          <div className="flex items-center justify-center mb-6">
            <div className="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center mr-4">
              <Bot className="w-8 h-8 text-white" />
            </div>
            <Sparkles className="w-8 h-8 text-yellow-300" />
          </div>
          <h1 className="text-5xl md:text-6xl font-bold mb-4">AI T∆∞ v·∫•n GREENNEST</h1>
          <p className="text-xl md:text-2xl text-green-100">Tr·ª£ l√Ω th√¥ng minh cho kh√¥ng gian xanh c·ªßa b·∫°n</p>
        </div>
      </section>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* AI Chat Interface */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
              {/* Chat Header */}
              <div className="bg-green-600 text-white p-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                      <Bot className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <h2 className="text-xl font-bold">AI T∆∞ v·∫•n GREENNEST</h2>
                      <p className="text-green-100 text-sm">Tr·ª±c tuy·∫øn ‚Ä¢ S·∫µn s√†ng h·ªó tr·ª£</p>
                    </div>
                  </div>
              </div>

              {/* Chat Messages */}
              <div className="h-96 overflow-y-auto p-6 space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${
                        message.type === 'user'
                          ? 'bg-green-600 text-white'
                          : 'bg-gray-100 text-gray-900'
                      }`}
                    >
                      <div className="flex items-start space-x-2">
                        {message.type === 'bot' && (
                          <Bot className="w-5 h-5 text-green-600 mt-1 flex-shrink-0" />
                        )}
                        <div className="flex-1">
                          <p className="whitespace-pre-wrap">{message.content}</p>
                          <p className={`text-xs mt-2 ${
                            message.type === 'user' ? 'text-green-100' : 'text-gray-500'
                          }`}>
                            {message.timestamp.toLocaleTimeString('vi-VN', {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                {isTyping && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 text-gray-900 px-4 py-3 rounded-2xl">
                      <div className="flex items-center space-x-2">
                        <Bot className="w-5 h-5 text-green-600" />
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

                {/* Quick Actions */}
                <div className="p-4 border-t border-gray-200">
                  <p className="text-sm text-gray-600 mb-3">H√†nh ƒë·ªông nhanh:</p>
                  <div className="flex flex-wrap gap-2">
                    {quickActions.map((action, index) => (
                      <button
                        key={index}
                        onClick={() => setInputMessage(action.text)}
                        className="px-3 py-2 bg-green-50 text-green-700 rounded-lg text-sm hover:bg-green-100 transition-colors flex items-center space-x-1"
                      >
                        <span>{action.icon}</span>
                        <span>{action.text}</span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Chat Input */}
                <div className="p-4 border-t border-gray-200">
                  <div className="flex space-x-3">
                    <input
                      type="text"
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                      className="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    />
                    <button
                      onClick={handleSendMessage}
                      disabled={!inputMessage.trim()}
                      className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center space-x-2"
                    >
                      <Send className="w-5 h-5" />
                    </button>
                  </div>
                </div>
            </div>
          </div>

          {/* Service Info Sidebar */}
          <div className="space-y-6">
            {/* Contact Info */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Li√™n h·ªá tr·ª±c ti·∫øp</h3>
              <div className="space-y-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <Phone className="w-5 h-5 text-green-600" />
                  </div>
                  <div>
                    <p className="font-semibold text-gray-900">Hotline</p>
                    <a href="tel:0867976303" className="text-green-600 hover:text-green-700">
                      0867976303
                    </a>
                  </div>
                </div>

                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <Mail className="w-5 h-5 text-green-600" />
                  </div>
                  <div>
                    <p className="font-semibold text-gray-900">Email</p>
                    <a href="mailto:info@greennest.vn" className="text-green-600 hover:text-green-700">
                      info@greennest.vn
                    </a>
                  </div>
                </div>

                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <MapPin className="w-5 h-5 text-green-600" />
                  </div>
                  <div>
                    <p className="font-semibold text-gray-900">ƒê·ªãa ch·ªâ</p>
                    <p className="text-gray-600 text-sm">
                      BS8 - The Beverly Solari<br />
                      Vinhomes Grand Park, Q9
                    </p>
                  </div>
                </div>

                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <Clock className="w-5 h-5 text-green-600" />
                  </div>
                  <div>
                    <p className="font-semibold text-gray-900">Gi·ªù l√†m vi·ªác</p>
                    <p className="text-gray-600 text-sm">
                      T2-T6: 8:00-18:00<br />
                      T7: 8:00-12:00
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Service Features */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-xl font-bold text-gray-900 mb-4">D·ªãch v·ª• c·ªßa ch√∫ng t√¥i</h3>
              <div className="space-y-3">
                {[
                  'Thi·∫øt k·∫ø c·∫£nh quan chuy√™n nghi·ªáp',
                  'T∆∞ v·∫•n ch·ªçn c√¢y ph√π h·ª£p',
                  'ChƒÉm s√≥c c√¢y c·∫£nh ƒë·ªãnh k·ª≥',
                  'Thi·∫øt k·∫ø kh√¥ng gian xanh',
                  'B√°o gi√° mi·ªÖn ph√≠',
                  'B·∫£o h√†nh c√¢y tr·ªìng 30 ng√†y'
                ].map((feature, index) => (
                  <div key={index} className="flex items-center space-x-3">
                    <CheckCircle2 className="w-5 h-5 text-green-600 flex-shrink-0" />
                    <span className="text-gray-700">{feature}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Stats */}
            <div className="bg-gradient-to-r from-green-600 to-green-700 rounded-xl shadow-lg p-6 text-white">
              <h3 className="text-xl font-bold mb-4">Th·ªëng k√™</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold">500+</div>
                  <div className="text-sm text-green-100">Kh√°ch h√†ng</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold">50+</div>
                  <div className="text-sm text-green-100">D·ª± √°n</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold">95%</div>
                  <div className="text-sm text-green-100">H√†i l√≤ng</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold">5+</div>
                  <div className="text-sm text-green-100">NƒÉm KN</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}